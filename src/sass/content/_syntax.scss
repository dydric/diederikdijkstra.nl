code,
kbd,
pre,
samp {
  font-family: $font-code;
}

p > code {
  @include padding(.1, .2);
  color: $color-grey-light;
  // border: .1rem solid shade($color-grey-lighter, 5);
  display: inline;
  margin: 0;
  white-space: nowrap;

  &::before,
  &::after {
    color: $color-grey-light;
    content: '`';
    font-weight: 400;
  }
}

pre {
  overflow: auto;
}

.highlight {
  @include md-before('</>');
  @include margin(1.5, 0);
  background: $color-syntax-bg;
  color: tint($color-syntax-txt, 25);
  max-width: calc(#{$max-width} + 4rem);
  position: relative;
  visibility: visible !important;

  @include mq(990) {
    margin-left: auto;
    margin-right: auto;
  }

  pre {
    @include padding(.3, 1);
    @include margin-bottom(.2);
    @include line-height(1.1);

    code {
      @include line-height(1.1);

      span {
        @include line-height(1.1);
      }
    }
  }

  .c {      color: $color-syntax-1; font-style: italic; } // Comment
  .err {    background-color: $color-syntax-12; color: $color-white; } // Error
  .k {      font-weight: bold; } // Keyword
  .o {      font-weight: bold; } // Operator
  .cm {     color: $color-syntax-1; font-style: italic; } // Comment.Multiline
  .cp {     color: $color-syntax-1; font-weight: bold; } // Comment.Preproc
  .c1 {     color: $color-syntax-1; font-style: italic; } // Comment.Single
  .cs {     color: $color-syntax-1; font-style: italic; font-weight: bold; } // Comment.Special
  .gd,
  .gd .x {  background-color: tint($color-syntax-5, 80); color: $color-syntax-txt; } // Generic.Deleted (Specific)
  .ge {     font-style: italic; } // Generic.Emph
  .gr {     color: $color-syntax-5; } // Generic.Error
  .gh {     color: $color-syntax-1; } // Generic.Heading
  .gi,
  .gi .x {  background-color: tint($color-syntax-10, 80); color: $color-syntax-txt; } // Generic.Inserted (Specific)
  .go {     color: tint($color-syntax-txt, 40); } // Generic.Output
  .gp {     color: tint($color-syntax-txt, 30); } // Generic.Prompt
  .gs {     font-weight: bold; } // Generic.Strong
  .gu {     color: tint($color-syntax-txt, 50); } // Generic.Subheading
  .gt {     color: $color-syntax-5; } // Generic.Traceback
  .kc {     font-weight: bold; } // Keyword.Constant
  .kd {     font-weight: bold; } // Keyword.Declaration
  .kp {     font-weight: bold; } // Keyword.Pseudo
  .kr {     font-weight: bold; } // Keyword.Reserved
  .kt {     color: $color-syntax-6; font-weight: bold; } // Keyword.Type
  .m {      color: $color-syntax-2; } // Literal.Number
  .s {      color: $color-syntax-3; } // Literal.String
  .na {     color: $color-syntax-4; } // Name.Attribute
  .nb {     color: $color-syntax-7; } // Name.Builtin
  .nc {     color: $color-syntax-6; font-weight: bold; } // Name.Class
  .no {     color: $color-syntax-4; } // Name.Constant
  .ni {     color: $color-syntax-8; } // Name.Entity
  .ne {     color: $color-syntax-5; font-weight: bold; } // Name.Exception
  .nf {     color: $color-syntax-5; font-weight: bold; } // Name.Function
  .nn {     color: tint($color-syntax-txt, 30); } // Name.Namespace
  .nt {     color: $color-syntax-9; } // Name.Tag
  .nv {     color: $color-syntax-4; } // Name.Variable
  .ow {     font-weight: bold; } // Operator.Word
  .w {      color: tint($color-syntax-txt, 50); } // Text.Whitespace
  .mf {     color: $color-syntax-2; } // Literal.Number.Float
  .mh {     color: $color-syntax-2; } // Literal.Number.Hex
  .mi {     color: $color-syntax-2; } // Literal.Number.Integer
  .mo {     color: $color-syntax-2; } // Literal.Number.Oct
  .sb {     color: $color-syntax-3; } // Literal.String.Backtick
  .sc {     color: $color-syntax-3; } // Literal.String.Char
  .sd {     color: $color-syntax-3; } // Literal.String.Doc
  .s2 {     color: $color-syntax-3; } // Literal.String.Double
  .se {     color: $color-syntax-3; } // Literal.String.Escape
  .sh {     color: $color-syntax-3; } // Literal.String.Heredoc
  .si {     color: $color-syntax-3; } // Literal.String.Interpol
  .sx {     color: $color-syntax-3; } // Literal.String.Other
  .sr {     color: $color-syntax-10; } // Literal.String.Regex
  .s1 {     color: $color-syntax-3; } // Literal.String.Single
  .ss {     color: $color-syntax-11; } // Literal.String.Symbol
  .bp {     color: $color-syntax-1; } // Name.Builtin.Pseudo
  .vc {     color: $color-syntax-4; } // Name.Variable.Class
  .vg {     color: $color-syntax-4; } // Name.Variable.Global
  .vi {     color: $color-syntax-4; } // Name.Variable.Instance
  .il {     color: $color-syntax-2; } // Literal.Number.Integer.Long
}
